<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--<bean id="abstractDataSource" class="org.apache.commons.dbcp.BasicDataSource">-->
        <!--<property name="driverClassName" value="${connection.driverClassName}"/>-->
        <!--<property name="maxActive" value="${connection.maxActive}"/>-->
        <!--<property name="maxIdle" value="${connection.maxIdle}"/>-->
        <!--<property name="minIdle" value="${connection.minIdle}"/>-->
        <!--<property name="maxWait" value="${connection.maxWait}"/>-->
        <!--<property name="removeAbandoned" value="${connection.removeAbandoned}"/>-->
        <!--<property name="removeAbandonedTimeout" value="${connection.removeAbandonedTimeout}"/>-->
        <!--<property name="logAbandoned" value="${connection.logAbandoned}"/>-->
    <!--</bean>-->

    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${initialSize}" />
        <property name="minIdle" value="${minIdle}" />
        <property name="maxActive" value="${maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="${validationQuery}" />
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <property name="testOnReturn" value="${testOnReturn}" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${filters}" />
    </bean>

    <!-- masters datasource config -->
    <bean id="masterDataSource" parent="abstractDataSource" >
        <property name="username" value="${connection.master.username}"/>
        <property name="password" value="${connection.master.password}"/>
        <property name="url" value="${connection.master.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>

    <bean id="master2DataSource" parent="abstractDataSource" >
        <property name="username" value="${connection.master2.username}"/>
        <property name="password" value="${connection.master2.password}"/>
        <property name="url" value="${connection.master2.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>

    <bean id="master3DataSource" parent="abstractDataSource" >
        <property name="username" value="${connection.master3.username}"/>
        <property name="password" value="${connection.master3.password}"/>
        <property name="url" value="${connection.master3.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>

    <!-- slaves datasource config -->
    <bean id="slaveDataSource" parent="abstractDataSource">
        <property name="username" value="${connection.slave.username}"/>
        <property name="password" value="${connection.slave.password}"/>
        <property name="url" value="${connection.slave.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>
    <bean id="slave2DataSource" parent="abstractDataSource" >
        <property name="username" value="${connection.slave2.username}"/>
        <property name="password" value="${connection.slave2.password}"/>
        <property name="url" value="${connection.slave2.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>
    <bean id="slave3DataSource" parent="abstractDataSource" >
        <property name="username" value="${connection.slave3.username}"/>
        <property name="password" value="${connection.slave3.password}"/>
        <property name="url" value="${connection.slave3.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>


    <jdbc:initialize-database data-source="masterDataSource">
        <jdbc:script location="classpath:database/hsqldb-schema.sql"/>
        <jdbc:script location="classpath:database/hsqldb-dataload.sql"/>
    </jdbc:initialize-database>
    <jdbc:initialize-database data-source="master2DataSource">
        <jdbc:script location="classpath:database/hsqldb-schema.sql"/>
        <jdbc:script location="classpath:database/hsqldb-dataload.sql"/>
    </jdbc:initialize-database>
    <jdbc:initialize-database data-source="master3DataSource">
        <jdbc:script location="classpath:database/hsqldb-schema.sql"/>
        <jdbc:script location="classpath:database/hsqldb-dataload.sql"/>
    </jdbc:initialize-database>
    <jdbc:initialize-database data-source="slaveDataSource">
        <jdbc:script location="classpath:database/hsqldb-schema.sql"/>
        <jdbc:script location="classpath:database/hsqldb-dataload.sql"/>
    </jdbc:initialize-database>
    <jdbc:initialize-database data-source="slave2DataSource">
        <jdbc:script location="classpath:database/hsqldb-schema.sql"/>
        <jdbc:script location="classpath:database/hsqldb-dataload.sql"/>
    </jdbc:initialize-database>
    <jdbc:initialize-database data-source="slave3DataSource">
        <jdbc:script location="classpath:database/hsqldb-schema.sql"/>
        <jdbc:script location="classpath:database/hsqldb-dataload.sql"/>
    </jdbc:initialize-database>



    <bean id="dataSourceProxy" class="com.stone.db.proxy.DataSourceProxy">
        <!--<property name="master" ref="masterDataSource"/>-->
        <property name="masters">
            <list>
                <ref bean="masterDataSource"/>
                <ref bean="master2DataSource"/>
                <ref bean="master3DataSource"/>
            </list>
        </property>
        <property name="slaves">
            <list>
                <ref bean="slaveDataSource"/>
                <ref bean="slave2DataSource"/>
                <ref bean="slave3DataSource"/>
            </list>
        </property>
    </bean>
    <bean id="transactionManager" class="com.stone.db.proxy.DataSourceProxyTransactionManager">
        <property name="dataSource" ref="dataSourceProxy"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" mode="aspectj"></tx:annotation-driven>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="merge*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="*" read-only="true" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>


    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSourceProxy"/>
    </bean>

    <bean id="taskJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSourceProxy"/>
    </bean>

    <!--<bean id="dataSourceClusterInitListener" class="com.stone.db.proxy.listener.DataSourceClusterInitListener">-->
        <!--<property name="user" value="${connection.slave3.username}"/>-->
        <!--<property name="password" value="${connection.slave3.password}"/>-->
        <!--<property name="urlSource" value="${connection.master.url}"/>-->
        <!--<property name="urlTargets" >-->
            <!--<array>-->
                <!--<value>"${connection.slave.url}"</value>-->
                <!--<value>"${connection.slave2.url}"</value>-->
                <!--<value>"${connection.slave3.url}"</value>-->
            <!--</array>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="mcatDataSource" parent="abstractDataSource" >
        <property name="username" value="${connection.mcat.username}"/>
        <property name="password" value="${connection.mcat.password}"/>
        <property name="url" value="${connection.mcat.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>
    <bean id="scat1DataSource" parent="abstractDataSource" >
        <property name="username" value="${connection.scat1.username}"/>
        <property name="password" value="${connection.scat1.password}"/>
        <property name="url" value="${connection.scat1.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>
    <bean id="scat2DataSource" parent="abstractDataSource" >
        <property name="username" value="${connection.scat2.username}"/>
        <property name="password" value="${connection.scat2.password}"/>
        <property name="url" value="${connection.scat2.url}"/>
        <property name="driverClassName" value="${connection.driverClassName}"/>
    </bean>
    <bean id="catDataSourceProxy" class="com.stone.db.proxy.DataSourceProxy">
        <property name="master" ref="mcatDataSource"/>
        <!--<property name="masters">-->
            <!--<list>-->
                <!--<ref bean="mcatDataSource"/>-->
            <!--</list>-->
        <!--</property>-->
        <property name="slaves">
            <list>
                <ref bean="scat1DataSource"/>
                <ref bean="scat2DataSource"/>
            </list>
        </property>
    </bean>
    <jdbc:initialize-database data-source="mcatDataSource">
        <jdbc:script location="classpath:database/h2-mcat.sql"/>
        <!--<jdbc:script location="classpath:database/h2-mcat-data.sql"/>-->
    </jdbc:initialize-database>
    <jdbc:initialize-database data-source="scat1DataSource">
        <jdbc:script location="classpath:database/h2-mcat.sql"/>
        <!--<jdbc:script location="classpath:database/h2-mcat-data.sql"/>-->
    </jdbc:initialize-database>
    <jdbc:initialize-database data-source="scat2DataSource">
        <jdbc:script location="classpath:database/h2-mcat.sql"/>
        <!--<jdbc:script location="classpath:database/h2-mcat-data.sql"/>-->
    </jdbc:initialize-database>


    <bean id="catTransactionManager" class="com.stone.db.proxy.DataSourceProxyTransactionManager">
        <property name="dataSource" ref="catDataSourceProxy"/>
    </bean>

    <tx:advice id="catTxAdvice" transaction-manager="catTransactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="merge*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="REPEATABLE_READ"/>
            <tx:method name="*" read-only="true" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="catTxServicePointcut" expression="execution(* com.stone.db.proxy.service..*.*(..))"/>
        <aop:pointcut id="txServicePointcut" expression="execution(* com.stone.db.proxy.service..*.*(..))"/>
        <aop:pointcut id="txTaskPointcut" expression="execution(* com.stone.db.proxy.task..*.*(..))"/>

        <aop:advisor advice-ref="txAdvice" pointcut-ref="txServicePointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txTaskPointcut"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="catTxServicePointcut"/>
    </aop:config>
</beans>